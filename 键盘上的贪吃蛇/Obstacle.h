#pragma once
#include "Const.h"
#include "Point.h"
#include <iostream>
using namespace std;

// 障碍物类,用链表表示障碍物
class Obstacle
{
	Point _position;
	int p[7][3] = {
		0,0,0,0,0,0,0,
		0,1,1,1,1,1,0,
		0,0,0,0,0,0,0,
	};
	int v[3][7] = {
		0,0,0,
		0,1,0,
		0,1,0,
		0,1,0,
		0,1,0,
		0,1,0,
		0,0,0,
	};
	int l[4][7][7] =
	{
		{
			0,0,0,0,0,0,0,
			0,1,1,1,1,1,0,
			0,1,0,0,0,0,0,
			0,1,0,0,0,0,0,
			0,1,0,0,0,0,0,
			0,1,0,0,0,0,0,
			0,0,0,0,0,0,0,
		},{
			0,0,0,0,0,0,0,
			0,1,1,1,1,1,0,
			0,0,0,0,0,1,0,
			0,0,0,0,0,1,0,
			0,0,0,0,0,1,0,
			0,0,0,0,0,1,0,
			0,0,0,0,0,0,0,
		},{
			0,0,0,0,0,0,0,
			0,1,0,0,0,0,0,
			0,1,0,0,0,0,0,
			0,1,0,0,0,0,0,
			0,1,0,0,0,0,0,
			0,1,1,1,1,1,0,
			0,0,0,0,0,0,0,
		},{
			0,0,0,0,0,0,0,
			0,0,0,0,0,1,0,
			0,0,0,0,0,1,0,
			0,0,0,0,0,1,0,
			0,0,0,0,0,1,0,
			0,1,1,1,1,1,0,
			0,0,0,0,0,0,0,
		}
	};
	int d[7][7] = {
		0,0,0,0,0,0,0,
		0,0,0,0,0,1,0,
		0,0,0,0,1,0,0,
		0,0,0,1,0,0,0,
		0,0,1,0,0,0,0,
		0,1,0,0,0,0,0,
		0,0,0,0,0,0,0,
	};
	int D[11][7] = {
		0,0,0,0,0,0,0,
		0,1,0,0,0,0,0,
		0,1,1,0,0,0,0,
		0,1,0,1,0,0,0,
		0,1,0,0,1,0,0,
		0,1,0,0,0,1,0,
		0,1,0,0,1,0,0,
		0,1,0,1,0,0,0,
		0,1,1,0,0,0,0,
		0,1,0,0,0,0,0,
		0,0,0,0,0,0,0,
	};
	int C[11][7] = {
		0,0,0,0,0,0,0,
		0,0,0,0,0,1,0,
		0,0,0,0,1,0,0,
		0,0,0,1,0,0,0,
		0,0,1,0,0,0,0,
		0,1,0,0,0,0,0,
		0,0,1,0,0,0,0,
		0,0,0,1,0,0,0,
		0,0,0,0,1,0,0,
		0,0,0,0,0,1,0,
		0,0,0,0,0,0,0,
	};
	int L[11][7] = {
		0,0,0,0,0,0,0,
		0,1,0,0,0,0,0,
		0,1,0,0,0,0,0,
		0,1,0,0,0,0,0,
		0,1,0,0,0,0,0,
		0,1,0,0,0,0,0,
		0,1,0,0,0,0,0,
		0,1,0,0,0,0,0,
		0,1,0,0,0,0,0,
		0,1,1,1,1,1,0,
		0,0,0,0,0,0,0,
	};
	static int _num;
	Obstacle* _next;
public:
	Obstacle() :_position(), _next(NULL) {}
	static int num();
	// 返回_next
	Obstacle* getNext();
	// 设置_next
	void setNext(Obstacle* next);
	// 创建障碍物
	void createObstacle(int);
	static void createObstacles();
	bool isValid(int);
	// 创建特殊障碍物
	void createLogo();
	Point& getPosition()
	{
		return _position;
	}
	void setPosition(Point& point)
	{
		_position = point;
	}
	void setPosition(int x, int y)
	{
		_position = (Point&)Point(x, y);
	}
};
